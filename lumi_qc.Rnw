% !Rnw root = lumi_microarray.Rnw
\section{Data Summary}

<<read_data, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, results='hide'>>=
library("lumi")
library("knitr")
library("RColorBrewer")
library("reshape2")
library("ggplot2")
library("gplots")
library("ggdendro")
library("lumiHumanAll.db")
library("annotate")
library("limma")

raw_data =lumiR('~/Data/Bioconductor_Course/lumi_raw_data.txt')
pheno_data = read.table("~/Data/Bioconductor_Course/lumi_pheno.txt", header=T, sep="\t", row.names=1, stringsAsFactors=FALSE)
pData(raw_data) = pheno_data
vst_data = lumiT(raw_data, method='vst')
rsn_data = lumiN(vst_data, method='rsn')
qc_data = lumiQ(rsn_data)

@

%first Sexpr call below won't work if we don't do this
\Sexpr{ncol(qc_data)}
The data consists of \Sexpr{ncol(qc_data)} human HT12v4 arrays, which have \Sexpr{nrow(qc_data)} probes. A summary of the probes passing the scanner's detection p-Value threshold is shown in table 1.\\

\begin{table}[h]
\centering
<<table1, echo=FALSE, cache=FALSE, warning=FALSE, message=FALSE, results="asis">>=
pvals = detection(qc_data)
passes5 = apply(pvals, 2, function(x) sum(x<0.05))
passes1 = apply(pvals, 2, function(x) sum(x<0.01))
percent5 = passes5/nrow(qc_data)*100
percent1 = passes1/nrow(qc_data)*100
df = data.frame("Sample Name"=sampleNames(qc_data), 
                "Th 0.05"=passes5, 
                "Percent 0.05"=percent5,
                "Th 0.01"=passes1, 
                "Percent 0.01"=percent1)

kable(df, format="latex", row.names = FALSE, digits=3)
@

\caption{Probes passing detection p-Value thresholds on the arrays in the experiment.}\label{table1}
\end{table}

\subsection{Normalisation}

Normalisation is achieved by transforming the data to log2 space via a \emph{Variance Stabilizing Transformation}, which is designed to take advantage of the significant technical replication present on Illumina Beadarrays resulting from the presence of multiple beads for each individual probe. This transformation reduces the heteroskedastic nature of microarray data, so that it better conforms to the assumptions of the statistical tests we'll apply later. Actual normalisation is by the \emph{Robust Spline Normalisation} algorithm that was designed for Beadarray data, and combines the advantageous features of both quantile normalisation (fast, gene rank order preserving) and loess normalization which is continuous.

\begin{figure}[h]
\centering
<<figure1, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, fig.height=5>>=
group_factor = factor(pData(qc_data)$knockdown, levels=unique(pData(qc_data)$knockdown)) #preserve the order?

rd = melt(exprs(raw_data))
rd$value = log2(rd$value)
rd$treat = 'raw'
rd$group = rep(group_factor, each=nrow(qc_data))
nd = melt(exprs(qc_data))
nd$treat = 'norm'
nd$group = rep(group_factor, each=nrow(qc_data))
ad = rbind(rd, nd)
ad$treat = factor(ad$treat, levels = c("raw", "norm"))

ggplot(data=ad, aes(x=Var2, y=value)) + 
  geom_boxplot(aes(fill=group), outlier.size=0.5, size=0.2) + 
  facet_grid(. ~ treat) + 
  scale_x_discrete(name="") +
  scale_y_continuous(name="Amplitude") +
  theme_bw() + 
  theme(axis.text.x=element_text(angle=90, vjust=0.5, size=6), 
        axis.text.y=element_text(size=6), axis.title.y=element_text(size=6),
        legend.text=element_text(size=6), legend.position="top", legend.title=element_text(size=6))

@
\label{figure1}
\caption{Boxplots of data pre-normalisation (left) and after VST and RSN (right).}
\end{figure}

\clearpage

\section{Quality Control} % section title
\label{SC1-sect:qc} % \label{} allows reference to this section
% !!! please use unique labels for all
% your sections, equations, figures, tables, etc.



\subsection{Principal Components Analysis}

\noindent Principal component analysis is a dimension reduction and visualisation technique that is here used to project the multivariate data vector of each array into a two-dimensional plot, such that the spatial arrangement of the points in the plot reflects the overall data (dis)similarity between the arrays. 

\noindent Arrays are colour-coded by the experimental groups they fall into, allowing for easy identification of samples that are responding differently to the others in their cohort, whether they are grouping incorrectly, or are outliers.

\begin{figure}[h]
\centering
<<figure2, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, fig.height=5>>=

pca = prcomp(t(exprs(qc_data)))
d = as.data.frame(pca$x)
d$knockdown = group_factor
ggplot(d, aes(x=PC1, y=PC2)) + 
    geom_point(aes(colour=knockdown)) + # add size=PC3 to aes to get "3D" plot
    theme_bw() +
    theme(legend.text = element_text(size = 8), text = element_text(size=8)) + 
    geom_text(label=rownames(d), size=2, vjust=1.2, hjust=-0.2)
    
@
\label{figure2}
\caption{a scatterplot of the arrays along the first two principal components. You can use this plot to explore if the arrays cluster, and whether this is according to an intended experimental factor (indicated by colour), or according to unintended causes such as batch effects.}
\end{figure}

\clearpage

\subsection{Sample Distance}

\noindent The distance (d) between two arrays (a and b) is computed as the euclidian difference between the data of the arrays (using the data from all probes without filtering). \\
In formula, $dab = \sqrt{\sum{}(Mai - Mbi)^2}$, where Mai is the value of the i-th probe on the a-th array.

\begin{figure}[h]
\centering

<<figure3, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, fig.height=5>>=
d = dist(t(exprs(qc_data)), method='euclidian')
#apply(as.matrix(d), 2, mean) #can use for outlier detection - how to decide what's large?
heatmap.2(as.matrix(d), col=redblue(48), 
          trace="none", density.info="none")
@

\label{figure3}
\caption{shows a false color heatmap of the distances between arrays. The color scale is chosen to cover the range of distances encountered in the dataset. Patterns in this plot can indicate clustering of the arrays either because of intended biological or unintended experimental factors (batch effects).}
\end{figure}

\clearpage

\subsection{Hierarchical Clustering}

Hierarchical clustering is an agglomerative, greedy, unsupervised clustering technique. It takes a "bottom up" approach to clustering: each observation starts in its own cluster, then pairs of clusters are merged as one moves up the hierarchy. The mothod used here is complete linkage, such that when a cluster is formed, its distance to other arrays is computed as the maximum distance between any array in the cluster and the other array.

\begin{figure}[h]
\centering

<<figure4, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, fig.height=5>>=
# cluster the samples (method choice may vary)
d <- dist(t(exprs(qc_data)), method='euclidian')
h <- hclust(d, method='complete')

# now use ggdendro
dd <- dendro_data(h)
labs <- label(dd)
# need to colour labels by sample group - from phene
labs$group = pData(qc_data)[as.character(labs$label),]

# build the plot
ggdendrogram(h, leaf_labels=F, labels=F, rotate=T) +
  scale_x_discrete(labels = c()) + 
  scale_y_continuous(expand = c(0.1, 0)) +
  geom_text(data=labs, aes(label=label, x=x, y=y, colour=as.factor(group)), hjust=1.0, size=2.0) +
  theme(legend.text=element_text(size=6), legend.title=element_text(size=6))
  
@

\label{figure4}
\caption{dendrogram of samples clustered using complete hierarchical clustering.}
\end{figure}

\clearpage

\subsection{Conclusions (Sample Level)}

<<auto_outlier, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, results='asis'>>=
d <- dist(t(exprs(qc_data)), method='euclidian')
mean_dist = apply(as.matrix(d), 2, mean)
outliers = which(mean_dist > mean(mean_dist) + 2*sd(mean_dist))
cat("Outlier detection was performed by looking for arrays for which the mean of the distances to all other arrays was exceptionally large. ")
if (length(outliers) > 0) {
  if (length(outliers) == 1) {
    cat(length(outliers)," outlier (", names(outliers), ") was discovered by this mechanism.", sep="")
  } else {
    cat(length(outliers)," outliers (", sep="")
    cat(names(outliers), sep=", ")
    cat(") were discovered by this mechanism.", sep="")
  }
} else {
  cat("No outliers were discovered by this mechanism.")
}
@

All of the quality control analysis presented points to TF3TF4B being an outlier array that should be removed, as it is likely to be harmful to the analysis if left in. This array is removed for all subsequent analyses. The rest of the data looks clean and consistent.

<<outlier_remove, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, results='hide'>>=
raw_data = raw_data[,sampleNames(raw_data) != 'TF3TF4B']
vst_data = lumiT(raw_data, method='vst')
rsn_data = lumiN(vst_data, method='rsn')
qc_data = lumiQ(rsn_data)
#filter group_factor
group_factor = factor(pData(qc_data)$knockdown, levels=unique(pData(qc_data)$knockdown)) #preserve the order?
@

\subsection{Detected Probes}

<<probe_remove, echo=FALSE, cache=TRUE, warning=FALSE, message=FALSE, results='hide'>>=
present_count = detectionCall(qc_data)
filtered_data = qc_data[present_count > 0,]
nexclude = nrow(qc_data) - nrow(filtered_data)
@
Probes detected on each array are summarised in table 1. For a probe to be used in the subsequent analysis, it must pass the detection p-Value threshold (0.01) on at least one array. Applying this simple metric excludes \Sexpr{nexclude} probes from the analysis, and therefore we are carrying forward \Sexpr{nrow(filtered_data)} probes (\Sexpr{round(nrow(filtered_data)/nrow(qc_data)*100, 1)}\% of the total) on \Sexpr{ncol(filtered_data)} arrays for analysis.

\clearpage